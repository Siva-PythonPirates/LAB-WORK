#include <stdio.h>
#include <stdlib.h>
struct node {
	int info;
	struct node* next;
};
struct node* last = NULL;
void insert_first()
{
	int data;
	struct node* temp;
	temp = (struct node*)malloc(sizeof(struct node));
	printf("\nEnter data to be "
		"inserted: \n");
	scanf("%d", &data);
	if (last == NULL) {
		temp->info = data;
		temp->next = temp;
		last = temp;
	}
	else {
		temp->info = data;
		temp->next = last->next;
		last->next = temp;
	}
}
void insert_last()
{
	int data;
	struct node* temp;
	temp = (struct node*)malloc(sizeof(struct node));
	printf("\nEnter data to be "
		"inserted : \n");
	scanf("%d", &data);
	if (last == NULL) {
		temp->info = data;
		temp->next = temp;
		last = temp;
	}
	else {
		temp->info = data;
		temp->next = last->next;
		last->next = temp;
		last = temp;
	}
}
void insert_any()
{
	int data,value;
	struct node *temp, *n;
	printf("\nEnter number after which you want to enter number: \n");
	scanf("%d",&value);
	temp = last->next;
	do {
		if (temp->info == value) {
			n = (struct node*)malloc(sizeof(struct node));
			printf("\nEnter data to be"
				" inserted : \n");
			scanf("%d", &data);
			n->info = data;
			n->next = temp->next;
			temp->next = n;
			if (temp == last)
				last = n;
			break;
		}
		else
			temp = temp->next;
	} while (temp != last->next);
}
void delete_first()
{
	struct node* temp;
	if (last == NULL)
		printf("\nList is empty.\n");
	else {
		temp = last->next;
		last->next = temp->next;
		free(temp);
	}
}
void delete_last()
{
	struct node* temp;
	if (last == NULL)
		printf("\nList is empty.\n");
	temp = last->next;
	while (temp->next != last)
		temp = temp->next;
	temp->next = last->next;
	last = temp;
}
void delete_any()
{
	int pos, i = 1;
	struct node *temp, *position;
	temp = last->next;
	if (last == NULL)
		printf("\nList is empty.\n");
	else {
		printf("\nEnter index : ");
		scanf("%d", &pos);
		while (i <= pos - 1) {
			temp = temp->next;
			i++;
		}
		position = temp->next;
		temp->next = position->next;
		free(position);
	}
}
void display()
{
	if (last == NULL)
		printf("\nList is empty\n");
	else {
		struct node* temp;
		temp = last->next;
		do {
			printf("\n%d", temp->info);
			temp = temp->next;
		} while (temp != last->next);
	}
}
int main(){
	int c,i,x=1;
	while(x){
	printf("\n1.Insert at beginning\n2.Insert at end\n3.Insert at a specified position\n4.Delete Beginning\n5.Delete End\n6.Delete any specified postion\n7.Traverse\n8.Exit\n\nEnter your choice :");
	scanf("%d",&c);
	switch (c){
	case 1:
	insert_first();
	break;
	case 2:
	insert_last();
	break;
	case 3:
	insert_any();
	break;
	case 4:
	delete_first();
	break;
	case 5:
	delete_last();
	break;
	case 6:
	delete_any();
	break;
	case 7:
	display();
	break;
	case 8:
	x=0;
	printf("Thankyou....");
	break;
	}
}
}






















#include<stdio.h>
int main(){
//     int n;
//     scanf("%d",&n);
//     int a[n];
//     for(int i=0;i<n;i++)
//     scanf("%d",&a[i]);
//     int c=0;
//     int v=1;
//     for(int i=0;i<a[c];i++){
            
//             printf("%d",v);
//             printf("%*s",c,"0");
//             v++;c++;
//         }
//         // c--;
// }

    int  i,j, n;int number=1,space;
    int limit=n*(n+1);
    scanf("%d", &n);
    int  c;
    for (i = 0; i < n; i++) {
        for (j = 1; j <= i; j++) {
        printf("* ");
        }
        for (j = n; j > i; j--) {
        printf("%d ", number);
        ++number;
        }
        // for (j = n; j > i; j--) {
        // printf("%d ", number);
        // ++number;
        // }
        
        // for (j = n; j > i; j--) {
        // printf("%d ", number);
        // ++number;
        // }
    
        // for (j = number; number!=limit+1; j++) {
        // printf("%d ", number);
        // number++;
        // }
        // for (i = n; i >= 1; i--) {
        //     for (c = 1; c <= i; c++) {
        //         printf("%d ", n*i+(c-n+1) );
        //         }
            printf("\n");
        // }
    // }
}
//   for (i = n; i >= 1; --i) {
//     //   for (space = 0; space < n - i; ++space)
//     //      printf("  ");
//     //   for (j = i; j <= 2 * i - 1; ++j)
//     //      printf("* ");
//       for (j = 0; j <= i - 1; ++j){
//          printf("%d ",number);
//          number++;}
//       printf("\n");
//   }
}



    

    // for (i = 1; i <= n; i++) {
        
    // }


































int* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {
    int top, bottom, left, right, where;
    int i;
    int *p = (int *)malloc(matrixRowSize * matrixColSize * sizeof(int));
    if (!p) {
        return p;
    }
    
    i = 0;
    top = 0;
    left = 0;
    bottom = matrixRowSize;
    right = matrixColSize;
    
    while (i < matrixRowSize * matrixColSize) {
        if (top < bottom) {
            where = left;
            while (where < right) {         // on top, left -> right
                p[i++] = matrix[top][where];
                where ++;
            }
            top ++;
        }
        if (right > left) {
            where = top;
            while (where < bottom) {        // on right, top -> bottom
                p[i++] = matrix[where][right - 1];
                where ++;
            }
            right --;
        }
        if (bottom > top) {                 // on bottom, right -> left
            where = right;
            while (where > left) {
                p[i++] = matrix[bottom - 1][where - 1];
                where --;
            }
            bottom --;
        }
        if (left < right) {                 // on left, bottom -> top
            where = bottom;
            while (where > top) {
                p[i++] = matrix[where - 1][left];
                where --;
            }
            left ++;
        }
    }
    
    return p;
}



























int* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) {
    int m = matrixSize;
    int n = *matrixColSize;
    int totalElements = m * n;
    int* ans = (int*)malloc(totalElements * sizeof(int));
    *returnSize = totalElements;

    int left = 0, right = n - 1, top = 0, bottom = m - 1;
    int index = 0;

    while (index < totalElements && top<=bottom && left<=right) {
        // Traverse from left to right
        for (int i = left; i <= right && index < totalElements; i++) {
            ans[index++] = matrix[top][i];
        }
        top++;

        // Traverse from top to bottom
        for (int i = top; i <= bottom && index < totalElements; i++) {
            ans[index++] = matrix[i][right];
        }
        right--;
    if(top<=bottom)
       { // Traverse from right to left
        for (int i = right; i >= left && index < totalElements; i--) {
            ans[index++] = matrix[bottom][i];
        }
        bottom--;
       }
    if(left<=right)
    {
        // Traverse from bottom to top
        for (int i = bottom; i >= top && index < totalElements; i--) {
            ans[index++] = matrix[i][left];
        }
        left++;
    }
    }
    return ans;
}
